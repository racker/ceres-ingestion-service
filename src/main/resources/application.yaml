server:
  port: 8080

---
spring:
  profiles: test

rest-template:
  request-config:
    connection-request-timeout: 120000  # timeout when requesting a connection from the connection manager
    connect-timeout: 120000             # timeout until a connection is established
    socket-timeout: 120000              # timeout for waiting for data

  pooling-http-client-connection-manager:
    max-total: 5 # Max number of connection to pool

kafka:
  servers: ${spring.embedded.kafka.brokers}
  listener-container-idle-interval: 10000
  session-timeout-ms-config: 15000

  topics:
    in: unified.metrics.json
    source-5m: unified.metrics.json.5m
    source-20m: unified.metrics.json.20m
    source-60m: unified.metrics.json.60m
    source-240m: unified.metrics.json.240m
    source-1440m: unified.metrics.json.1440m

  consumer:
      group: influxdb-consumer-group-test

---
spring:
  profiles: development

rest-template:
  request-config:
    connection-request-timeout: 120000  # timeout when requesting a connection from the connection manager
    connect-timeout: 120000             # timeout until a connection is established
    socket-timeout: 120000              # timeout for waiting for data

  pooling-http-client-connection-manager:
    max-total: 5 # Max number of connection to pool

kafka:
  servers: ${TEST_KAFKA_BOOTSTRAP_SERVERS}
  listener-container-idle-interval: ${LISTENER_CONTAINER_IDLE_INTERVAL}
  session-timeout-ms-config: ${SESSION_TIMEOUT_MS_CONFIG}

  ssl:
    truststore-location: ${TRUSTSTORE_LOCATION}
    truststore-password: ${TRUSTSTORE_PASSWORD}
    keystore-location: ${KEYSTORE_LOCATION}
    keystore-password: ${KEYSTORE_PASSWORD}
    key-password: ${KEY_PASSWORD}
  properties:
    security-protocol: SSL

  topics:
    in: unified.metrics.json
    source-5m: unified.metrics.json.5m
    source-20m: unified.metrics.json.20m
    source-60m: unified.metrics.json.60m
    source-240m: unified.metrics.json.240m
    source-1440m: unified.metrics.json.1440m

  consumer:
      group: influxdb-consumer-group-test

tenant-routing-service:
  url: ${TENANT_ROUTING_SERVICE_URL}

logging:
  level:
    com.rackspacecloud: info
    org.springframework:
      web: info
      kafka.listener: info

management:
  endpoints:
    web:
      exposure:
        include: "health,jolokia,metrics"
  metrics:
    tags:
      stack: "dev"
    export:
      influx:
        db: ceres
        uri: http://localhost:8086
        auto-create-db: true

---
spring:
  profiles: production

rest-template:
  request-config:
    # timeout when requesting a connection from the connection manager
    connection-request-timeout: ${REST_TEMPLATE_CONNECTION_REQUEST_TIMEOUT}

    # timeout until a connection is established
    connect-timeout: ${REST_TEMPLATE_CONNECT_TIMEOUT}

    # timeout for waiting for data
    socket-timeout: ${REST_TEMPLATE_SOCKET_TIMEOUT}

  pooling-http-client-connection-manager:
    max-total: ${REST_TEMPLATE_CONNECTION_POOLING_MAX} # Max number of connection to pool

kafka:
  servers: ${KAFKA_BOOTSTRAP_SERVERS}
  listener-container-idle-interval: ${LISTENER_CONTAINER_IDLE_INTERVAL}
  session-timeout-ms-config: ${SESSION_TIMEOUT_MS_CONFIG}

  ssl:
    truststore-location: ${TRUSTSTORE_LOCATION}
    truststore-password: ${TRUSTSTORE_PASSWORD}
    keystore-location: ${KEYSTORE_LOCATION}
    keystore-password: ${KEYSTORE_PASSWORD}
    key-password: ${KEY_PASSWORD}
  properties:
    security-protocol: SSL

  topics:
    in: unified.metrics.json
    source-5m: unified.metrics.json.5m
    source-20m: unified.metrics.json.20m
    source-60m: unified.metrics.json.60m
    source-240m: unified.metrics.json.240m
    source-1440m: unified.metrics.json.1440m

  consumer:
    group: influxdb-consumer-group

tenant-routing-service:
  url: ${TENANT_ROUTING_SERVICE_URL}

logging:
  level:
    com.rackspacecloud: info
    org.springframework:
      web: info
      kafka.listener: info

management:
  endpoints:
    web:
      exposure:
        include: "health,jolokia,metrics"
  metrics:
    tags:
      stack: "prod"
    export:
      statsd:
        flavor: ${statsd.flavor:telegraf}
        host: ${statsd.host:localhost}
        port: ${statsd.port:8125}
        enabled: ${statsd.enabled:false}
      influx:
        db: ceres
        uri: http://data-influxdb:8086
        auto-create-db: true
      stackdriver:
        project-id: ceres-dev-222017